
/* 
 * Dataset maven coordinates
 */
description='The OML tutorial project'
group = 'io.modelware.ontologies'
version = '0.1.0'

// Dataset-specific variables
ext.dataset = [
	// Name of dataset (matches one used in .fuseki.ttl file)
	name: 'oml-tutorial',
	// Root ontology IRI of the dataset
	rootOntologyIri: 'http://opencaesar.io/tutorial/description/bundle',
	rootMechanicalOntologyIri: 'http://opencaesar.io/tutorial/description/bundle-mechanical',
	rootL1OperationsOntologyIri: 'http://opencaesar.io/tutorial/description/bundle-kepler16b-L1-operations',
	rootL1OntologyIri: 'http://opencaesar.io/tutorial/description/bundle-kepler16b-L1',
	rootL2OrbiterOperationsOntologyIri: 'http://opencaesar.io/tutorial/description/bundle-kepler16b-L2-orbiter-operations',
	rootL2LanderOperationsOntologyIri: 'http://opencaesar.io/tutorial/description/bundle-kepler16b-L2-lander-operations',
	rootL2OntologyIri: 'http://opencaesar.io/tutorial/description/bundle-kepler16b-L2',
	// URL for publishing dataset documentation
	publishUrl: 'https://modelware.github.io/oml-tutorial'
]


/*
 * The configuration of OML dependencies
 */
configurations {
	oml
}

/*
 * Dependency versions
 */
ext { 
	coreVersion = '2.+'
}

/*
 * The OML dependencies
 */
dependencies {
	oml "io.opencaesar.ontologies:core-vocabularies:$coreVersion"
}

/*
 * A task to extract and merge the OML dependencies
 */
task downloadDependencies(type:io.opencaesar.oml.merge.OmlMergeTask, group:"oml") {
    inputZipPaths = configurations.oml.files
    outputCatalogFolder = file('build/oml')
}

/*
 * A task to generate Bikeshed specification for the OML catalog
 */
task omlToBikeshed(type: io.opencaesar.oml.bikeshed.Oml2BikeshedTask, group:"oml", dependsOn: downloadDependencies) {
	// OML catalog
	inputCatalogPath = file('catalog.xml')
	// OWL folder
	outputFolderPath = file('build/bikeshed')
	// Input Ontology Iri
	rootOntologyIri = "$dataset.rootOntologyIri".toString()
	// Publish URL
	publishUrl = "$dataset.publishUrl".toString()
}

/*
 * A task to generate the model documentation in HTML
 */
import org.gradle.internal.os.OperatingSystem
task generateDocs(dependsOn: omlToBikeshed, group:"oml") {
	doLast {
		if (OperatingSystem.current().isWindows()) {
			exec { 
				if (project.hasProperty('BIKESHED')) {
					environment 'PATH', "${environment.PATH}:${BIKESHED}"
				}
				commandLine 'build/bikeshed/publish.bat' 
			}
		} else {
			exec { 
				commandLine 'chmod', '+x', 'build/bikeshed/publish.sh' 
			}
			exec {
				if (project.hasProperty('BIKESHED')) {
					environment 'PATH', "${environment.PATH}:${BIKESHED}"
				}
				commandLine 'build/bikeshed/publish.sh'
			}
		}
	}
}

/*
 * A task to convert the OML catalog to OWL catalog
 */
task omlToOwl(type:io.opencaesar.oml2owl.Oml2OwlTask, group:"oml", dependsOn: downloadDependencies) {
	// OML catalog
	inputCatalogPath = file('catalog.xml')
	// OWL catalog
	outputCatalogPath = file('build/owl/catalog.xml')
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 */
task owlReason(type:io.opencaesar.owl.reason.OwlReasonTask, group:"oml", dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = "$dataset.rootOntologyIri".toString()
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
		"$dataset.rootOntologyIri/classes = ALL_SUBCLASS".toString(),
		"$dataset.rootOntologyIri/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY".toString(),
		"$dataset.rootOntologyIri/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS".toString()
	]
	// Junit error report
	reportPath = file('build/reports/reasoning.xml')
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 */
task owlReasonMechanical(type:io.opencaesar.owl.reason.OwlReasonTask, group:"oml", dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = "$dataset.rootMechanicalOntologyIri".toString()
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
		"$dataset.rootMechanicalOntologyIri/classes = ALL_SUBCLASS".toString(),
		"$dataset.rootMechanicalOntologyIri/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY".toString(),
		"$dataset.rootMechanicalOntologyIri/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS".toString()
	]
	// Junit error report
	reportPath = file('build/reports/l1/mechanical/reasoning.xml')
}


/*
 * A task to run the Openllet reasoner on the OWL catalog
 */
task owlReasonL1Operations(type:io.opencaesar.owl.reason.OwlReasonTask, group:"oml", dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = "$dataset.rootOperationsOntologyIri".toString()
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
		"$dataset.rootL1OperationsOntologyIri/classes = ALL_SUBCLASS".toString(),
		"$dataset.rootL1OperationsOntologyIri/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY".toString(),
		"$dataset.rootL1OperationsOntologyIri/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS".toString()
	]
	// Junit error report
	reportPath = file('build/reports/l1/operations/reasoning.xml')
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 */
task owlReasonL1(type:io.opencaesar.owl.reason.OwlReasonTask, group:"oml", dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = "$dataset.rootOperationsOntologyIri".toString()
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
			"$dataset.rootL1OntologyIri/classes = ALL_SUBCLASS".toString(),
			"$dataset.rootL1OntologyIri/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY".toString(),
			"$dataset.rootL1OntologyIri/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS".toString()
	]
	// Junit error report
	reportPath = file('build/reports/l1/reasoning.xml')
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 */
task owlReasonL2Orbiter(type:io.opencaesar.owl.reason.OwlReasonTask, group:"oml", dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = "$dataset.rootL2OrbiterOperationsOntologyIri".toString()
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
			"$dataset.rootL2OrbiterOperationsOntologyIri/classes = ALL_SUBCLASS".toString(),
			"$dataset.rootL2OrbiterOperationsOntologyIri/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY".toString(),
			"$dataset.rootL2OrbiterOperationsOntologyIri/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS".toString()
	]
	// Junit error report
	reportPath = file('build/reports/l2/orbiter/reasoning.xml')
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 */
task owlReasonL2Lander(type:io.opencaesar.owl.reason.OwlReasonTask, group:"oml", dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = "$dataset.rootL2LanderOperationsOntologyIri".toString()
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
			"$dataset.rootL2LanderOperationsOntologyIri/classes = ALL_SUBCLASS".toString(),
			"$dataset.rootL2LanderOperationsOntologyIri/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY".toString(),
			"$dataset.rootL2LanderOperationsOntologyIri/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS".toString()
	]
	// Junit error report
	reportPath = file('build/reports/l2/lander/reasoning.xml')
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 */
task owlReasonL2(type:io.opencaesar.owl.reason.OwlReasonTask, group:"oml", dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = "$dataset.rootL2OntologyIri".toString()
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
		"$dataset.rootL2OntologyIri/classes = ALL_SUBCLASS".toString(),
		"$dataset.rootL2OntologyIri/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY".toString(),
		"$dataset.rootL2OntologyIri/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS".toString()
	]
	// Junit error report
	reportPath = file('build/reports/l2/reasoning.xml')
}

/*
 * A task to load an OWL catalog to a Fuseki dataset endpoint
 */
task owlLoad(type:io.opencaesar.owl.load.OwlLoadTask, group:"oml", dependsOn: owlReason) {
	catalogPath = file('build/owl/catalog.xml')
	endpointURL = "http://localhost:3030/$dataset.name".toString()
    fileExtensions = ['owl', 'ttl']
	iris = [
		"$dataset.rootOntologyIri/classes".toString(),
	    "$dataset.rootOntologyIri/properties".toString(),
	    "$dataset.rootOntologyIri/individuals".toString()
	]
}

/*
 * A task to run a set of SPARQL queries on a Fuseki dataset endpoint
 */
task owlQuery(type:io.opencaesar.owl.query.OwlQueryTask, group:"oml", dependsOn: owlLoad) {
	endpointURL = "http://localhost:3030/$dataset.name".toString()
	queryPath = file('src/sparql')
	resultPath = file('build/frames')
	format = 'tsv'
}

task renderObjectives(type: Exec, group:"oml", dependsOn: owlQuery) {
	commandLine '/usr/bin/Rscript'
	args 'src/r/render/objectives.r'
	args 'build/frames/objectives.frame'
	args 'build/reports/objectives.html'
}

/*
 * A task to run a set of SHACL validation rules on a Fuseki dataset endpoint
 */
task owlShacl(type:io.opencaesar.owl.shacl.fuseki.OwlShaclFusekiTask, group:"oml", dependsOn: owlLoad) {
	endpointURL = "http://localhost:3030/$dataset.name".toString()
	queryPath = file('src/shacl')
	resultPath = file('build/reports')
}

/*
 * A task to build the project, which executes several tasks together
 */
task build(group:"oml") {
	dependsOn owlReason
	dependsOn owlReasonMechanical
	dependsOn owlReasonL1Operations
	dependsOn owlReasonL1
	dependsOn owlReasonL2Orbiter
	dependsOn owlReasonL2Lander
	dependsOn owlReasonL2
}

/*
 * Integration with the Eclipse IDE
 */ 
apply plugin: 'eclipse'

eclipse {
		synchronizationTasks downloadDependencies
}
